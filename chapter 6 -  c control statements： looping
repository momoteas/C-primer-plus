Revisiting the while loop: 
        1) scanf() returns value: scanf() returns the number of items successfully read;

The while statement: 

Which is bigger: using relational operators and expressions

Summary: the while statement
        1) keyword: while;
        2) general comments: The while statement creates a loop that repeats until the test expression becomes false, or zero. 
           The while statement is an entry-condition loop; that is, the decision to go through one more pass of the loop is made 
           before the loop is traversed;
        3) form: 
                while ( expression ){
                      statement
                }
                
The for loop:
        1) The for loop gathers all three actions (initializing, testing, and updating) into one place;
        2) using for for flexibility:
                1> You can use the decrement operator to count down instead of up;
                2> You can count by twos, tens, and so on, if you want;
                3> You can count by characters instead of by numbers;
                4> You can test some condition other than the number of iterations;
                5> You can let a quantity increase geometrically instead of arithmetically; that is, instead of adding a fixed 
                   amount each time, you can multiply by a fixed amount;
                6> You can use any legal expression you want for the third expression. Whatever you put in will be updated for 
                   each iteration;
                7> You can even leave one or more expressions blank (but don't omit the semicolons). Just be sure to include 
                   within the loop itself some statement that eventually causes the loop to terminate;
        3) summary: the for statement
                1> keyword: for;
                2> general comments: The for statement uses three control expressions, separated by semicolons, to control a 
                   looping process. The initialize expression is executed once, before any of the loop statements are executed.
                   Then the test expression is evaluated and, if it is true (or nonzero), the loop is cycled through once. Then 
                   the update expression is evaluated, and it is time to check the test expression again;
                3> form: 
                          for (initialize ; test ; update )
                               statement
                               
More Assignment Operators: ++== , --== , **== , //== , %%==;

The Comma Operator: The comma operator extends the flexibility of the for loop by enabling you to include more
                    than one initialization or update expression in a single for loop specification;
                    
An exit-condition loop: do while:
        1) The while loop and the for loop are both entry-condition loops. The test condition is checked before 
           each iteration of the loop, so it is possible for the statements in the loop to never execute. C also
           has an exit-condition loop, in which the condition is checked after each iteration of the loop, 
           guaranteeing that statements are executed at least once;
        2) summary: the do while statement
                1> keywords: do while;
                2> general comments: The statement creates a loop that repeats until the test becomes false or 
                   zero. The do while statement is an exit-condition loopâ€”the decision to go through one more 
                   pass of the loop is made after the loop has been traversed. Therefore, the loop must be 
                   executed at least once;
                3> form:
                        do
                            statement
                        while ( expression );

Introduing arrays:
















